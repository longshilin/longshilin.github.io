[ { "title": "构建打包ET8的两种模式：Demo（状态同步）以及Lockstep（帧同步）", "url": "/posts/%E6%9E%84%E5%BB%BA%E6%89%93%E5%8C%85ET8%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F-Demo-%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5-%E4%BB%A5%E5%8F%8ALockstep-%E5%B8%A7%E5%90%8C%E6%AD%A5/", "categories": "ET8", "tags": "ET8, 教程", "date": "2023-11-15 00:00:00 +0800", "snippet": "", "content": "" }, { "title": "ET8教程系列", "url": "/posts/ET8%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/", "categories": "ET8", "tags": "ET8, 教程", "date": "2023-03-02 14:00:00 +0800", "snippet": "教程基于的分支版本：https://github.com/egametang/ET/tree/release8.0 构建打包ET8的两种模式：Demo（状态同步）以及Lockstep（帧同步）", "content": "教程基于的分支版本：https://github.com/egametang/ET/tree/release8.0 构建打包ET8的两种模式：Demo（状态同步）以及Lockstep（帧同步）" }, { "title": "Go开发", "url": "/posts/Learn-Go/", "categories": "Go开发", "tags": "GoLang, Go", "date": "2023-03-02 14:00:00 +0800", "snippet": "Go资源 Go学习文档: https://www.topgoer.com/ Go实战项目: https://github.com/flipped-aurora/gin-vue-admin Go学习路径：https://mp.weixin.qq.com/s/DIIpLUrGj2_-7Qd6vu0kuA Go编码规范：https://githu...", "content": "Go资源 Go学习文档: https://www.topgoer.com/ Go实战项目: https://github.com/flipped-aurora/gin-vue-admin Go学习路径：https://mp.weixin.qq.com/s/DIIpLUrGj2_-7Qd6vu0kuA Go编码规范：https://github.com/xxjwxc/uber_go_guide_cn#%E4%BB%8B%E7%BB%8D GORM配置外键，满足关联查询一句话总结外键查询配置：gorm:\"foreignKey:关联表的结构体字段;references:当前表的结构体字段; 不需要配置数据表的外键，只需在Model中定义外键和引用就可以了。举例：type ProblemBasic struct {\tID uint `gorm:\"primarykey;\" json:\"id\"`\tCreatedAt MyTime `json:\"created_at\"`\tUpdatedAt MyTime `json:\"updated_at\"`\tDeletedAt gorm.DeletedAt `gorm:\"index;\" json:\"deleted_at\"`\tIdentity string `gorm:\"column:identity;type:varchar(36);\" json:\"identity\"` // 问题表的唯一标识\tProblemCategories []*ProblemCategory `gorm:\"foreignKey:problem_id;references:id\" json:\"problem_categories\"` // 关联问题分类表 ProblemCategory\tTitle string `gorm:\"column:title;type:varchar(255);\" json:\"title\"` // 文章标题\tContent string `gorm:\"column:content;type:text;\" json:\"content\"` // 文章正文\tMaxRuntime int `gorm:\"column:max_runtime;type:int(11);\" json:\"max_runtime\"` // 最大运行时长\tMaxMem int `gorm:\"column:max_mem;type:int(11);\" json:\"max_mem\"` // 最大运行内存\tPassNum int64 `gorm:\"column:pass_num;type:int(11);\" json:\"pass_num\"` // 通过次数\tSubmitNum int64 `gorm:\"column:submit_num;type:int(11);\" json:\"submit_num\"` // 提交次数}type ProblemCategory struct {\tID uint `gorm:\"primarykey;\" json:\"id\"`\tCreatedAt MyTime `json:\"created_at\"`\tUpdatedAt MyTime `json:\"updated_at\"`\tDeletedAt gorm.DeletedAt `gorm:\"index;\" json:\"deleted_at\"`\tProblemId uint `gorm:\"column:problem_id;type:int(11);\" json:\"problem_id\"` // 问题的ID\tCategoryId uint `gorm:\"column:category_id;type:int(11);\" json:\"category_id\"` // 分类的ID\tCategoryBasic *CategoryBasic `gorm:\"foreignKey:id;references:category_id;\" json:\"category_basic\"` // 关联分类的基础信息表 CategoryBasic}type CategoryBasic struct {\tID uint `gorm:\"primarykey;\" json:\"id\"`\tCreatedAt MyTime `json:\"created_at\"`\tUpdatedAt MyTime `json:\"updated_at\"`\tDeletedAt gorm.DeletedAt `gorm:\"index;\" json:\"deleted_at\"`\tIdentity string `gorm:\"column:identity;type:varchar(36);\" json:\"identity\"` // 分类的唯一标识\tName string `gorm:\"column:name;type:varchar(100);\" json:\"name\"` // 分类名称\tParentId int `gorm:\"column:parent_id;type:int(11);\" json:\"parent_id\"` // 父级ID}查询ProblemBasic表记录时，得到的json数据：{ \"code\": 200, \"data\": { \"id\": 1, \"created_at\": \"2023-03-22 18:20:22\", \"updated_at\": \"2023-03-22 18:42:47\", \"deleted_at\": null, \"identity\": \"1\", \"problem_categories\": [ { \"id\": 1, \"created_at\": \"2023-03-22 18:26:33\", \"updated_at\": \"2023-03-22 18:53:24\", \"deleted_at\": null, \"problem_id\": 1, \"category_id\": 1, \"category_basic\": { \"id\": 1, \"created_at\": \"2023-03-22 18:30:26\", \"updated_at\": \"2023-03-22 18:53:34\", \"deleted_at\": null, \"identity\": \"1\", \"name\": \"分类1\", \"parent_id\": 0 } }, { \"id\": 2, \"created_at\": \"2023-03-22 18:26:33\", \"updated_at\": \"2023-03-22 18:53:24\", \"deleted_at\": null, \"problem_id\": 1, \"category_id\": 2, \"category_basic\": { \"id\": 2, \"created_at\": \"2023-03-22 18:30:26\", \"updated_at\": \"2023-03-22 18:53:34\", \"deleted_at\": null, \"identity\": \"2\", \"name\": \"分类2\", \"parent_id\": 0 } } ], \"title\": \"题目1\", \"content\": \"这是题目1的详细内容\", \"max_runtime\": 0, \"max_mem\": 0, \"pass_num\": 0, \"submit_num\": 0 }}" }, { "title": "观察者模式", "url": "/posts/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/", "categories": "Unity, 游戏编程模式", "tags": "Unity e-Book", "date": "2023-02-21 22:30:43 +0800", "snippet": "观察者模式是一种行为型模式，它定义了一种一对多的依赖关系，当一个对象的状态发生改变时，它的所有依赖对象都会收到通知并自动更新。在游戏开发中，观察者模式常用于实现事件系统（例如玩家获得道具或者触发战斗事件）、UI界面等。下面是一个简单的观察者模式的示例：public interface GameEventObserver { void onGameEvent(GameEvent even...", "content": "观察者模式是一种行为型模式，它定义了一种一对多的依赖关系，当一个对象的状态发生改变时，它的所有依赖对象都会收到通知并自动更新。在游戏开发中，观察者模式常用于实现事件系统（例如玩家获得道具或者触发战斗事件）、UI界面等。下面是一个简单的观察者模式的示例：public interface GameEventObserver { void onGameEvent(GameEvent event);}public class Player implements GameEventObserver { public void onGameEvent(GameEvent event) { if (event.getType() == GameEventType.ENEMY_KILLED) { // Player gains experience and loot } }}public class GameEventManager { private List&lt;GameEventObserver&gt; observers = new ArrayList&lt;&gt;(); public void registerObserver(GameEventObserver observer) { observers.add(observer); } public void unregisterObserver(GameEventObserver observer) { observers.remove(observer); } public void notifyObservers(GameEvent event) { for (GameEventObserver observer : observers) { observer.onGameEvent(event); } }}在这个示例中，GameEventManager 是一个观察者模式的主题，它负责管理游戏事件的订阅和发布。Player 类实现了 GameEventObserver 接口，并注册到了 GameEventManager 中。当游戏事件发生时，GameEventManager 会通知所有的观察者，包括 Player，以便它们可以处理游戏事件。再例如，在一个 RPG 游戏中，玩家可以通过点击怪物来攻击它，需要实现点击事件的观察者模式：public interface IClickable { void OnClick();}public class Monster : IClickable { public void OnClick() { // 受到攻击逻辑 }}public class Player { private List&lt;IClickable&gt; clickables = new List&lt;IClickable&gt;(); public void AddClickable(IClickable clickable) { clickables.Add(clickable); } public void RemoveClickable(IClickable clickable) { clickables.Remove(clickable); } public void OnClick() { foreach (IClickable clickable in clickables) { clickable.OnClick(); } }}// 调用代码Monster monster = new Monster();Player player = new Player();player.AddClickable(monster);player.OnClick();" }, { "title": "装饰器模式", "url": "/posts/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/", "categories": "Unity, 游戏编程模式", "tags": "Unity e-Book", "date": "2023-02-21 22:30:43 +0800", "snippet": "装饰器模式是一种结构型模式，它动态地给一个对象添加一些额外的职责，而不需要修改这个对象的类。装饰器模式可以将对象的功能进行组合，使得对象具有更加灵活的功能扩展能力。在游戏开发中，装饰器模式常用于实现技能系统、道具系统等。例如，在一个冒险游戏中，玩家可以装备武器来增强攻击力，可以使用装饰器模式来实现武器系统：public abstract class Weapon { public ab...", "content": "装饰器模式是一种结构型模式，它动态地给一个对象添加一些额外的职责，而不需要修改这个对象的类。装饰器模式可以将对象的功能进行组合，使得对象具有更加灵活的功能扩展能力。在游戏开发中，装饰器模式常用于实现技能系统、道具系统等。例如，在一个冒险游戏中，玩家可以装备武器来增强攻击力，可以使用装饰器模式来实现武器系统：public abstract class Weapon { public abstract float GetDamage();}public class Sword : Weapon { public override float GetDamage() { return 10; }}public abstract class WeaponDecorator : Weapon { protected Weapon weapon; public WeaponDecorator(Weapon weapon) { this.weapon = weapon; }}public class FireWeapon : WeaponDecorator { public FireWeapon(Weapon weapon) : base(weapon) { } public override float GetDamage() { return weapon.GetDamage() + 5; }}public class IceWeapon : WeaponDecorator { public IceWeapon(Weapon weapon) : base(weapon) { } public override float GetDamage() { return weapon.GetDamage() + 3; }}// 调用代码Weapon sword = new Sword();Weapon fireSword = new FireWeapon(sword);Weapon iceFireSword = new IceWeapon(fireSword);float damage = iceFireSword.GetDamage(); 下面是一些高级用法" }, { "title": "单例模式", "url": "/posts/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/", "categories": "Unity, 游戏编程模式", "tags": "Unity e-Book", "date": "2023-02-21 22:30:43 +0800", "snippet": "策略模式是一种行为型模式，它定义了算法族，分别封装起来，让它们之间可以互相替换。策略模式可以让算法的变化独立于使用算法的客户端。在游戏开发中，策略模式常用于实现 AI 行为、战斗系统等。例如，在一个回合制的战斗游戏中，玩家可以选择攻击、防御或逃跑。可以使用策略模式来实现不同的行为：public interface IBehaviorStrategy { void ExecuteBeha...", "content": "策略模式是一种行为型模式，它定义了算法族，分别封装起来，让它们之间可以互相替换。策略模式可以让算法的变化独立于使用算法的客户端。在游戏开发中，策略模式常用于实现 AI 行为、战斗系统等。例如，在一个回合制的战斗游戏中，玩家可以选择攻击、防御或逃跑。可以使用策略模式来实现不同的行为：public interface IBehaviorStrategy { void ExecuteBehavior();}public class AttackStrategy : IBehaviorStrategy { public void ExecuteBehavior(){ // 攻击逻辑 }}public class DefendStrategy : IBehaviorStrategy { public void ExecuteBehavior() { // 防御逻辑 }} public class EscapeStrategy : IBehaviorStrategy { public void ExecuteBehavior() { // 逃跑逻辑 }} public class Battle { private IBehaviorStrategy behaviorStrategy; public Battle(IBehaviorStrategy behaviorStrategy) { this.behaviorStrategy = behaviorStrategy; } public void ExecuteBehavior() { behaviorStrategy.ExecuteBehavior(); }} // 调用代码 Battle battle = new Battle(new AttackStrategy()); battle.ExecuteBehavior(); 下面是一些高级用法" }, { "title": "命令模式", "url": "/posts/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/", "categories": "Unity, 游戏编程模式", "tags": "Unity e-Book", "date": "2023-02-21 22:30:43 +0800", "snippet": "状态模式是一种行为型模式，它允许对象在内部状态发生改变时改变它的行为。在游戏设计中，状态模式通常用于处理游戏对象的状态，例如游戏角色的生命值、装备状态等。下面是一个简单的状态模式的示例：public interface PlayerState { void attack(); void defend();}public class NormalState implements P...", "content": "状态模式是一种行为型模式，它允许对象在内部状态发生改变时改变它的行为。在游戏设计中，状态模式通常用于处理游戏对象的状态，例如游戏角色的生命值、装备状态等。下面是一个简单的状态模式的示例：public interface PlayerState { void attack(); void defend();}public class NormalState implements PlayerState { public void attack() { // 普通状态下的攻击行为 } public void defend() { // 普通状态下的防御行为 }}public class InjuredState implements PlayerState { public void attack() { // 受伤状态下的攻击行为 } public void defend() { // 受伤状态下的防御行为 }}public class Player { private PlayerState state; public Player() { state = new NormalState(); } public void setState(PlayerState state) { this.state = state; } public void attack() { state.attack(); } public void defend() { state.defend(); }}在这个示例中，Player 是一个拥有不同状态的游戏角色。PlayerState 接口定义了角色状态的行为，包括攻击和防御。NormalState 和 InjuredState 分别代表了正常状态和受伤状态，它们实现了 PlayerState 接口，并分别实现了攻击和防御行为。Player 类持有一个状态对象，可以通过 setState() 方法切换状态。当角色进行攻击或防御行为时，它们实际调用的是当前状态对象的方法。" }, { "title": "工厂模式", "url": "/posts/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/", "categories": "Unity, 游戏编程模式", "tags": "Unity e-Book", "date": "2023-02-21 22:30:43 +0800", "snippet": "工厂模式是一种常见的创建型模式，它用于创建一组相关的对象。在游戏设计中，工厂模式通常用于创建游戏对象，例如敌人、道具和装备等。下面是一个简单的工厂模式的示例：public interface GameObject { void update();}public class Enemy implements GameObject { public void update() { ...", "content": "工厂模式是一种常见的创建型模式，它用于创建一组相关的对象。在游戏设计中，工厂模式通常用于创建游戏对象，例如敌人、道具和装备等。下面是一个简单的工厂模式的示例：public interface GameObject { void update();}public class Enemy implements GameObject { public void update() { // Update enemy logic }}public class GameObjectFactory { public static GameObject createGameObject(String type) { switch(type) { case \"Enemy\": return new Enemy(); case \"Item\": return new Item(); case \"Equipment\": return new Equipment(); default: return null; } }}在这个示例中，GameObjectFactory 是一个工厂类，它根据传入的类型参数来创建相应的游戏对象。这种方式可以将游戏对象的创建逻辑封装起来，方便扩展和维护。" }, { "title": "命令模式", "url": "/posts/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/", "categories": "Unity, 游戏编程模式", "tags": "Unity e-Book", "date": "2023-02-21 22:30:43 +0800", "snippet": "命令模式是一种行为型模式，它用于将一个请求封装成一个对象，从而允许请求的参数化、记录请求日志、支持撤销操作等。在游戏设计中，命令模式通常用于处理玩家的输入事件，例如按下键盘或鼠标按钮等。下面是一个简单的命令模式的示例：public interface Command { void execute(); void undo();}public class MoveCommand i...", "content": "命令模式是一种行为型模式，它用于将一个请求封装成一个对象，从而允许请求的参数化、记录请求日志、支持撤销操作等。在游戏设计中，命令模式通常用于处理玩家的输入事件，例如按下键盘或鼠标按钮等。下面是一个简单的命令模式的示例：public interface Command { void execute(); void undo();}public class MoveCommand implements Command { private Player player; private int x; private int y; public MoveCommand(Player player, int x, int y) { this.player = player; this.x = x; this.y = y; } public void execute() { player.move(x, y); } public void undo() { player.move(-x, -y); }}public class InputHandler { private Command moveUpCommand; private Command moveDownCommand; private Command moveLeftCommand; private Command moveRightCommand; public InputHandler(Player player) { moveUpCommand = new MoveCommand(player, 0, -1); moveDownCommand = new MoveCommand(player, 0, 1); moveLeftCommand = new MoveCommand(player, -1, 0); moveRightCommand = new MoveCommand(player, 1, 0); } public void handleInput(Input input) { switch(input) { case UP: moveUpCommand.execute(); break; case DOWN: moveDownCommand.execute(); break; case LEFT: moveLeftCommand.execute(); break; case RIGHT: moveRightCommand.execute(); break; default: break; } }}在这个示例中，Command 是一个接口，它定义了 execute() 和 undo() 方法。MoveCommand 是一个具体的命令类，它封装了玩家的移动请求。InputHandler 是一个命令模式的调用者，它根据输入事件来执行相应的命令。这种方式可以将玩家的输入事件与具体的操作分离开来，方便维护和修改。" }, { "title": "单例模式", "url": "/posts/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/", "categories": "Unity, 游戏编程模式", "tags": "Unity e-Book", "date": "2023-02-21 22:30:43 +0800", "snippet": "单例模式是指一个类只有一个实例，并且提供一个全局访问点。在游戏设计中，单例模式可以用来管理全局状态或者某些系统的实例，例如音频管理器或游戏设置管理器。下面是一个简单的单例模式的示例：public class AudioManager { private static AudioManager instance; private AudioManager() { ...", "content": "单例模式是指一个类只有一个实例，并且提供一个全局访问点。在游戏设计中，单例模式可以用来管理全局状态或者某些系统的实例，例如音频管理器或游戏设置管理器。下面是一个简单的单例模式的示例：public class AudioManager { private static AudioManager instance; private AudioManager() { // Private constructor } public static AudioManager getInstance() { if (instance == null) { instance = new AudioManager(); } return instance; }}在这个示例中，AudioManager 类只有一个实例，并且提供了一个静态方法 getInstance() 来访问该实例。这种方式可以确保在整个游戏中只有一个 AudioManager 实例，避免了资源浪费和状态不一致的问题。 下面是一些高级用法" }, { "title": "享元模式", "url": "/posts/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/", "categories": "Unity, 游戏编程模式", "tags": "Unity e-Book", "date": "2023-02-21 22:30:43 +0800", "snippet": "享元模式是一种结构型模式，它通过共享技术实现大量细粒度对象的复用，从而减少系统资源的消耗，提高系统性能。在游戏开发中，享元模式常用于实现粒子系统、地形系统等。例如，在一个射击游戏中，需要大量的子弹来实现游戏效果，可以使用享元模式来实现子弹池：public class Bullet { private Vector3 position; private Vector3 direct...", "content": "享元模式是一种结构型模式，它通过共享技术实现大量细粒度对象的复用，从而减少系统资源的消耗，提高系统性能。在游戏开发中，享元模式常用于实现粒子系统、地形系统等。例如，在一个射击游戏中，需要大量的子弹来实现游戏效果，可以使用享元模式来实现子弹池：public class Bullet { private Vector3 position; private Vector3 direction; private float speed; public Bullet(Vector3 position, Vector3 direction, float speed) { this.position = position; this.direction = direction; this.speed = speed; } public void Move(float deltaTime) { position += direction * speed * deltaTime; }}public class BulletPool { private Queue&lt;Bullet&gt; bulletPool = new Queue&lt;Bullet&gt;(); public Bullet GetBullet(Vector3 position, Vector3 direction, float speed) { if (bulletPool.Count &gt; 0) { Bullet bullet = bulletPool.Dequeue(); bullet.MoveTo(position); bullet.SetDirection(direction); bullet.SetSpeed(speed); return bullet; } else { return new Bullet(position, direction, speed); } } public void RecycleBullet(Bullet bullet) { bulletPool.Enqueue(bullet); }}// 调用代码BulletPool bulletPool = new BulletPool();Bullet bullet = bulletPool.GetBullet(new Vector3(0, 0, 0), new Vector3(1, 0, 0), 10f);bullet.Move(0.1f);bulletPool.RecycleBullet(bullet); 下面是一些高级用法" }, { "title": "使用游戏编程模式升级代码", "url": "/posts/%E4%BD%BF%E7%94%A8%E6%B8%B8%E6%88%8F%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F%E5%8D%87%E7%BA%A7%E4%BB%A3%E7%A0%81/", "categories": "Unity, 游戏编程模式", "tags": "Unity e-Book, performance", "date": "2023-02-04 17:32:30 +0800", "snippet": " 在 Unity 中工作时，您不必重新发明轮子。很可能有人已经为你发明了一个。这篇文章是游戏编程模式系列大纲，接下来会用几个篇幅单独介绍上面图片中涉及到的设计模式。 推荐读物：https://en.wikipedia.org/wiki/Design_Patterns 以及 https://gameprogrammingpatterns.com/", "content": " 在 Unity 中工作时，您不必重新发明轮子。很可能有人已经为你发明了一个。这篇文章是游戏编程模式系列大纲，接下来会用几个篇幅单独介绍上面图片中涉及到的设计模式。 推荐读物：https://en.wikipedia.org/wiki/Design_Patterns 以及 https://gameprogrammingpatterns.com/" }, { "title": "git问题及解决办法", "url": "/posts/git/", "categories": "git", "tags": "git", "date": "2021-12-30 14:00:00 +0800", "snippet": "问题拉取项目时出现如下报错：$ git pullUpdating 06d3f1cd30..3d1e35911egit-lfs filter-process: git-lfs: command not foundfatal: the remote end hung up unexpectedly解决方案通过输入git --exec-path命令查看git的依赖库所在目录，然后将git-lfs....", "content": "问题拉取项目时出现如下报错：$ git pullUpdating 06d3f1cd30..3d1e35911egit-lfs filter-process: git-lfs: command not foundfatal: the remote end hung up unexpectedly解决方案通过输入git --exec-path命令查看git的依赖库所在目录，然后将git-lfs.exe文件放入该文件夹下。（其他平台同理）" }, { "title": "Unity Addressables 简介", "url": "/posts/Unity-Addressable/", "categories": "Unity, Addressables", "tags": "assetbundle", "date": "2021-12-07 22:00:00 +0800", "snippet": "Addressables overview可寻址资产系统（即，可寻址资产）是一个统一编辑器和运行时资产管理系统，它改进了对具有复杂实时内容交付需求的大型生产团队的支持。系统使用异步加载来支持从具有任何依赖项集合的任何位置加载。通过更有效地打包资产包并减少迭代时间，Addressables提供了一种使游戏更具动态性的简单方法。可寻址解决了开发人员面临的挑战，如迭代时间、依赖关系管理、内存管理和...", "content": "Addressables overview可寻址资产系统（即，可寻址资产）是一个统一编辑器和运行时资产管理系统，它改进了对具有复杂实时内容交付需求的大型生产团队的支持。系统使用异步加载来支持从具有任何依赖项集合的任何位置加载。通过更有效地打包资产包并减少迭代时间，Addressables提供了一种使游戏更具动态性的简单方法。可寻址解决了开发人员面临的挑战，如迭代时间、依赖关系管理、内存管理和内容打包。The Addressables workflow一旦资产（例如预制件）被标记为“可寻址”，它就会生成一个可以从任何地方调用的地址。无论资产位于何处（本地或远程），系统都将找到它及其依赖项，然后返回它。资产是用于创建游戏或应用程序的内容。资源的常见示例包括预设、纹理、材质、音频剪辑和动画。Addressables抽象资产包，使内容管理更加高效，同时包含资产及其所有底层数据。在可寻址工作流中，请求首先通过目录系统。系统将地址解码为一个位置，该位置由构建期间生成的关于资产是什么、其依赖关系、是本地还是远程等的数据组成。从目录中，请求通过提供程序系统。一个或多个提供商使用这些位置查找内容，然后将其返回到设备。在可寻址中，运行时是异步的。这使您能够在需要资产时灵活地检索资产，而无需更改游戏代码，无论资产在何处–其位置可能会根据您所处的开发阶段而变化。Addressables Groups当您将某物标记为可寻址时，它将成为可寻址组的一部分，可寻址组是可寻址资产及其数据的容器。您可以在“组”窗口中可视化组，该窗口是可寻址项的主基地。组可以确定该资产是在设备本地还是在服务器上。可寻址组上的数据保存在模式中，即数据契约。其中一个模式侧重于如何将资产和内容构建到捆绑包中。构建路径和加载路径是更有用的设置之一，允许您通过从下拉菜单中选择变量将内容设置为本地或远程。在Addressables概要文件系统中，为Addressables组创建概要文件，然后为给定概要文件定义希望变量计算的内容。这允许您在组上设置数据并远程更改，而无需重新编码该组的任何部分。Production为了最大限度地利用可寻址内容，它有助于根据您希望如何发布游戏的方式来可视化您的数据。您不必对结构进行承诺，因为在开发过程中很容易更改概要文件变量，但您应该有一种组织捆绑包的通用方法。例如，如果您希望在游戏中附带远程内容，但希望该内容在开发过程中是本地的，则可以创建一个配置文件，其中远程路径指向流媒体资产。通过这种方式，您可以将所有远程内容全局更改为本地内容，而无需触摸组的代码。Editor Hosting有时，您需要在服务器上承载内容。您可以设置远程路径，使用托管服务定义的变量，而不是指向实际URL。启用托管时，托管服务将在编辑器中设置HTTP主机。您可以将设备或播放器连接到此主机，以便进行测试。编辑器托管的一个强大功能是，您可以将所有内容设置为远程。这对内容开发人员和艺术家特别有用，因为您可以在继续迭代内容的同时构建播放器并将其部署到设备上。您不必重新部署播放机，也不必担心将内容从一台设备移动到另一台设备。请查看我们的文档，了解有关创建和配置可寻址主机服务的更多信息。Customizing your buildAddressables包有三个构建脚本，用于创建播放模式数据，以帮助您加快应用程序开发。脚本包括使用资产数据库、模拟组和使用现有构建。使用资产数据库脚本。这让你在内容上进行迭代时可以进入和退出播放模式；您可以在游戏流程中快速运行游戏。它直接通过资产数据库加载资产，以进行快速迭代，而无需进行分析或创建资产包。模拟组在不创建资产捆绑包的情况下分析布局和依赖关系的内容。要查看捆绑包在游戏过程中何时加载或卸载，请在可寻址事件查看器窗口（窗口&gt;资产管理&gt;可寻址&gt;事件查看器）中查看资产使用情况。此模式可帮助您模拟加载策略并调整内容组，以找到生产版本的正确平衡。 Ref: https://unity.com/de/how-to/simplify-your-content-management-addressables" }, { "title": "Unity MLAPI 多人游戏教程 – 完整指南", "url": "/posts/Unity-MLAPI-Guide/", "categories": "Unity, MLAPI", "tags": "multiplayer game", "date": "2021-12-04 00:00:00 +0800", "snippet": "https://gamedevacademy.org/unity-mlapi-tutorial/https://docs-multiplayer.unity3d.com/https://blog.unity.com/technology/choosing-the-right-netcode-for-your-gamehttps://github.com/Unity-Technologies/...", "content": "https://gamedevacademy.org/unity-mlapi-tutorial/https://docs-multiplayer.unity3d.com/https://blog.unity.com/technology/choosing-the-right-netcode-for-your-gamehttps://github.com/Unity-Technologies/com.unity.netcode.gameobjectshttps://github.com/Unity-Technologies/com.unity.multiplayer.samples.coop" }, { "title": "为您的 Unity 多人游戏选择正确的网络代码", "url": "/posts/Choosing-the-right-netcode-for-your-Unity-multiplayer-game/", "categories": "Unity, Netcode", "tags": "multiplayer game", "date": "2021-11-29 00:00:00 +0800", "snippet": "https://docs.unity3d.com/cn/2021.2/Manual/UNet.htmlhttps://blog.unity.com/technology/choosing-the-right-netcode-for-your-gamehttps://create.unity3d.com/form-netcode-report ", "content": "https://docs.unity3d.com/cn/2021.2/Manual/UNet.htmlhttps://blog.unity.com/technology/choosing-the-right-netcode-for-your-gamehttps://create.unity3d.com/form-netcode-report " }, { "title": "Enable Google Page Views", "url": "/posts/enable-google-pv/", "categories": "Blogging, Tutorial", "tags": "google analytics, pageviews", "date": "2021-01-04 07:32:00 +0800", "snippet": " The content of this post applies only to Universal Analytics property (UA), not Google Analytics 4 (GA 4). In addition, since UA is about to be deprecated on Jul 1, 2023, the Page Views feature o...", "content": " The content of this post applies only to Universal Analytics property (UA), not Google Analytics 4 (GA 4). In addition, since UA is about to be deprecated on Jul 1, 2023, the Page Views feature of Chirpy will also be deprecated at that time.This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it’s recommended to keep the google_analytics.pv.* empty unless you have a good reason. If your website has low traffic, the page views count would discourage you to write more blogs. With that said, let’s start with the setup.Set up Google AnalyticsCreate GA account and propertyFirst, you need to set up your account on Google analytics. While you create your account, you must create your first Property as well. Head to https://analytics.google.com/ and click on Start Measuring Enter your desired Account Name and choose the desired checkboxes Enter your desired Property Name. This is the name of the tracker project that appears on your Google Analytics dashboard Enter the required information About your business Hit Create and accept any license popup to set up your Google Analytics account and create your propertyCreate Data StreamWith your property created, you now need to set up Data Stream to track your blog traffic. After you signup, the prompt should automatically take you to create your first Data Stream. If not, follow these steps: Go to Admin on the left column Select the desired property from the drop-down on the second column Click on Data Streams Add a stream and click on Web Enter your blog’s URLIt should look like this:Now, click on the new data stream and grab the Measurement ID. It should look something like G-V6XXXXXXXX. Copy this to your _config.yml file:google_analytics: id: 'G-V6XXXXXXX' # fill in your Google Analytics ID # Google Analytics pageviews report settings pv: proxy_endpoint: # fill in the Google Analytics superProxy endpoint of Google App Engine cache_path: # the local PV cache data, friendly to visitors from GFW regionWhen you push these changes to your blog, you should start seeing the traffic on your Google Analytics. Play around with the Google Analytics dashboard to get familiar with the options available as it takes like 5 mins to pick up your changes. You should now be able to monitor your traffic in real time.Setup Page ViewsThere is a detailed tutorial available to set up Google Analytics superProxy. But, if you are interested to just quickly get your Chirpy-based blog display page views, follow along. These steps were tested on a Linux machine. If you are running Windows, you can use the Git bash terminal to run Unix-like commands.Setup Google App Engine Visit https://console.cloud.google.com/appengine Click on Create Application Click on Create Project Enter the name and choose the data center close to you Select Python language and Standard environment Enable billing account. Yeah, you have to link your credit card. But, you won’t be billed unless you exceed your free quota. For a simple blog, the free quota is more than sufficient. Go to your App Engine dashboard on your browser and select API &amp; Services from the left navigation menu Click on Enable APIs and Services button on the top Enable the following APIs: Google Analytics API On the left, Click on OAuth Consent Screen and accept Configure Consent Screen. Select External since your blog is probably hosted for the public. Click on Publish under Publishing Status Click on Credentials on the left and create a new OAuth Client IDs credential. Make sure to add an entry under Authorized redirect URIs that matches: https://&lt;project-id&gt;.&lt;region&gt;.r.appspot.com/admin/auth Note down the Your Client ID and Your Client Secret. You’ll need this in the next section. Download and install the cloud SDK for your platform: https://cloud.google.com/sdk/docs/quickstart Run the following commands: [root@bc96abf71ef8 /]# gcloud init~snip~Go to the following link in your browser: https://accounts.google.com/o/oauth2/auth?response_type=code&amp;client_id=XYZ.apps.googleusercontent.com&amp;redirect_uri=ABCDEFGEnter verification code: &lt;VERIFICATION CODE THAT YOU GET AFTER YOU VISIT AND AUTHENTICATE FROM THE ABOVE LINK&gt;You are logged in as: [blah_blah@gmail.com].Pick cloud project to use:[1] chirpy-test-300716[2] Create a new projectPlease enter numeric choice or text value (must exactly match listitem): 1[root@bc96abf71ef8 /]# gcloud info# Your selected project info should be displayed here Setup Google Analytics superProxy Clone the Google Analytics superProxy project on Github: https://github.com/googleanalytics/google-analytics-super-proxy to your local. Remove the first 2 lines in the src/app.yaml file: - application: your-project-id- version: 1 In src/config.py, add the OAUTH_CLIENT_ID and OAUTH_CLIENT_SECRET that you gathered from your App Engine Dashboard. Enter any random key for XSRF_KEY, your config.py should look similar to this #!/usr/bin/python2.7__author__ = 'pete.frisella@gmail.com (Pete Frisella)'# OAuth 2.0 Client SettingsAUTH_CONFIG = { 'OAUTH_CLIENT_ID': 'YOUR_CLIENT_ID', 'OAUTH_CLIENT_SECRET': 'YOUR_CLIENT_SECRET', 'OAUTH_REDIRECT_URI': '%s%s' % ( 'https://chirpy-test-XXXXXX.ue.r.appspot.com', '/admin/auth' )}# XSRF SettingsXSRF_KEY = 'OnceUponATimeThereLivedALegend' You can configure a custom domain instead of https://PROJECT_ID.REGION_ID.r.appspot.com.But, for the sake of keeping it simple, we will be using the Google provided default URL. From inside the src/ directory, deploy the app [root@bc96abf71ef8 src]# gcloud app deployServices to deploy:descriptor: [/tmp/google-analytics-super-proxy/src/app.yaml]source: [/tmp/google-analytics-super-proxy/src]target project: [chirpy-test-XXXX]target service: [default]target version: [VESRION_NUM]target url: [https://chirpy-test-XXXX.ue.r.appspot.com]Do you want to continue (Y/n)? YBeginning deployment of service [default]...╔════════════════════════════════════════════════════════════╗╠═ Uploading 1 file to Google Cloud Storage ═╣╚════════════════════════════════════════════════════════════╝File upload done.Updating service [default]...done.Setting traffic split for service [default]...done.Deployed service [default] to [https://chirpy-test-XXXX.ue.r.appspot.com]You can stream logs from the command line by running:$ gcloud app logs tail -s defaultTo view your application in the web browser run:$ gcloud app browse Visit the deployed service. Add a /admin to the end of the URL. Click on Authorize Users and make sure to add yourself as a managed user. If you get any errors, please Google it. The errors are self-explanatory and should be easy to fix. If everything went good, you’ll get this screen:Create Google Analytics QueryHead to https://PROJECT_ID.REGION_ID.r.appspot.com/admin and create a query after verifying the account. GA Core Reporting API query request can be created in Query Explorer.The query parameters are as follows: start-date: fill in the first day of blog posting end-date: fill in today (this is a parameter supported by GA Report, which means that it will always end according to the current query date) metrics: select ga:pageviews dimensions: select ga:pagePathIn order to reduce the returned results and reduce the network bandwidth, we add custom filtering rules 1: filters: fill in ga:pagePath=~^/posts/.*/$;ga:pagePath!@=. Among them, ; means using logical AND to concatenate two rules. If the site.baseurl is specified, change the first filtering rule to ga:pagePath=~^/BASE_URL/posts/.*/$, where BASE_URL is the value of site.baseurl. After Run Query, copy the generated contents of API Query URI at the bottom of the page and fill in the Encoded URI for the query of SuperProxy on GAE.After the query is saved on GAE, a Public Endpoint (public access address) will be generated, and we will get the query result in JSON format when accessing it. Finally, click Enable Endpoint in Public Request Endpoint to make the query effective, and click Start Scheduling in Scheduling to start the scheduled task.Configure Chirpy to Display Page ViewOnce all the hard part is done, it is very easy to enable the Page View on Chirpy theme. Your superProxy dashboard should look something like below and you can grab the required values.Update the _config.yml file of Chirpy project with the values from your dashboard, to look similar to the following:google_analytics: id: 'G-V6XXXXXXX' # fill in your Google Analytics ID pv: proxy_endpoint: 'https://PROJECT_ID.REGION_ID.r.appspot.com/query?id=&lt;ID FROM SUPER PROXY&gt;' cache_path: # the local PV cache data, friendly to visitors from GFW regionNow, you should see the Page View enabled on your blog.Reference Google Analytics Core Reporting API: Filters &#8617; " }, { "title": "Customize the Favicon", "url": "/posts/customize-the-favicon/", "categories": "Blogging, Tutorial", "tags": "favicon", "date": "2019-08-11 00:34:00 +0800", "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons...", "content": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files: browserconfig.xml site.webmanifestAnd then copy the remaining image files (.PNG and .ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files: File(s) From Online Tool From Chirpy *.PNG ✓ ✗ *.ICO ✓ ✗ ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition." }, { "title": "Getting Started", "url": "/posts/getting-started/", "categories": "Blogging, Tutorial", "tags": "getting started", "date": "2019-08-09 20:55:00 +0800", "snippet": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of Ruby, RubyGems, Jekyll, and Bundler. In addition, Git is also required to be installed.InstallationCreating a...", "content": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of Ruby, RubyGems, Jekyll, and Bundler. In addition, Git is also required to be installed.InstallationCreating a New SiteThere are two ways to create a new repository for this theme: Using the Chirpy Starter - Easy to upgrade, isolates irrelevant project files so you can focus on writing. Forking on GitHub - Convenient for custom development, but difficult to upgrade. Unless you are familiar with Jekyll and are determined to tweak or contribute to this project, this approach is not recommended.Option 1. Using the Chirpy StarterCreate a new repository from the Chirpy Starter and name it &lt;GH_USERNAME&gt;.github.io, where GH_USERNAME represents your GitHub username.Option 2. Forking on GitHubFork Chirpy on GitHub and rename it to &lt;GH_USERNAME&gt;.github.io. Please note that the default branch code is in development. If you want the site to be stable, please switch to the latest tag and start writing.And then execute:$ bash tools/init If you don’t want to deploy your site on GitHub Pages, append option --no-gh at the end of the above command.The above command will: Remove the files in _posts from your repository. If the option --no-gh is provided, the directory .github will be deleted. Otherwise, set up the GitHub Action workflow by removing the extension .hook of .github/workflows/pages-deploy.yml.hook, and then remove the other files and directories in the folder .github. Create a new commit to save the changes automatically. Installing DependenciesBefore running for the first time, go to the root directory of your site, and install dependencies as follows:$ bundleUsageConfigurationUpdate the variables of _config.yml as needed. Some of them are typical options: url avatar timezone langCustomizing StylesheetIf you need to customize the stylesheet, copy the theme’s assets/css/style.scss to the same path on your Jekyll site, and then add the custom style at the end of it.Starting with version 4.1.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, copy the main sass file _sass/jekyll-theme-chirpy.scss into the _sass directory in your site’s source, then create a new file _sass/variables-hook.scss and assign new value.Customing Static AssetsStatic assets configuration was introduced in version 5.1.0. The CDN of the static assets is defined by file _data/assets/cross_origin.yml, and you can replace some of them according to the network conditions in the region where your website is published.Also, if you’d like to self-host the static assets, please refer to the chirpy-static-assets.Running Local ServerYou may want to preview the site contents before publishing, so just run it by:$ bundle exec jekyll sOr run the site on Docker with the following command:$ docker run -it --rm \\ --volume=\"$PWD:/srv/jekyll\" \\ -p 4000:4000 jekyll/jekyll \\ jekyll serveAfter a while, the local service will be published at http://127.0.0.1:4000.DeploymentBefore the deployment begins, check out the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base URL on a web server other than GitHub Pages, remember to change the baseurl to your project name that starts with a slash, e.g, /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy by Using GitHub ActionsEnsure your Jekyll site has the file .github/workflows/pages-deploy.yml. Otherwise, create a new one and fill in the contents of the sample file, and the value of the on.push.branches should be the same as your repo’s default branch name. And then rename your repository to &lt;GH_USERNAME&gt;.github.io on GitHub.Furthermore, if you have committed Gemfile.lock to the repository and your local machine is not Linux, go the the root directory of your site and update the platform list:$ bundle lock --add-platform x86_64-linuxNow publish your Jekyll site: Browse to your repository on GitHub. Select the tab Settings, then click Pages in the left navigation bar. Then, in the Source section (under Build and deployment), select GitHub Actions from the dropdown menu. Push any commit to remote to trigger the GitHub Actions workflow. In the Actions tab of your repository, you should see the workflow Build and Deploy running. Once the build is complete and successful, the site should be deployed automatically. Visit your website at the address indicated by GitHub. Manually Build and DeployOn self-hosted servers, you cannot enjoy the convenience of GitHub Actions. Therefore, you should build the site on your local machine and then upload the site files to the server.Go to the root of the source project, and build your site as follows:$ JEKYLL_ENV=production bundle exec jekyll bOr build the site on Docker:$ docker run -it --rm \\ --env JEKYLL_ENV=production \\ --volume=\"$PWD:/srv/jekyll\" \\ jekyll/jekyll \\ jekyll buildUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to the target server.UpgradingIt depends on how you use the theme: If you are using the theme gem (there will be gem \"jekyll-theme-chirpy\" in the Gemfile), editing the Gemfile and update the version number of the theme gem, for example: - gem \"jekyll-theme-chirpy\", \"~&gt; 3.2\", \"&gt;= 3.2.1\"+ gem \"jekyll-theme-chirpy\", \"~&gt; 3.3\", \"&gt;= 3.3.0\" And then execute the following command: $ bundle update jekyll-theme-chirpy As the version upgrades, the critical files (for details, see the Startup Template) and configuration options will change. Please refer to the Upgrade Guide to keep your repo’s files in sync with the latest version of the theme. If you forked from the source project (there will be gemspec in the Gemfile of your site), then merge the latest upstream tags into your Jekyll site to complete the upgrade.The merge is likely to conflict with your local modifications. Please be patient and careful to resolve these conflicts. " }, { "title": "Writing a New Post", "url": "/posts/write-a-new-post/", "categories": "Blogging, Tutorial", "tags": "writing", "date": "2019-08-08 14:10:00 +0800", "snippet": "This tutorial will guide you how to write a post in the Chirpy template, and it’s worth reading even if you’ve used Jekyll before, as many features require specific variables to be set.Naming and P...", "content": "This tutorial will guide you how to write a post in the Chirpy template, and it’s worth reading even if you’ve used Jekyll before, as many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG] # TAG names should always be lowercase--- The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Adding author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one).&lt;author_id&gt;: name: &lt;full name&gt; twitter: &lt;twitter_of_author&gt; url: &lt;homepage_of_author&gt;And then use author to specify a single entry or authors to specify multiple entries:---author: &lt;author_id&gt; # for single entry# orauthors: [&lt;author1_id&gt;, &lt;author2_id&gt;] # for multiple entries---Having said that, the key author can also identify multiple entries. The benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---MermaidMermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.ImagesCaptionAdd italics to the next line of an image，then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image:![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right. Once the position is specified, the image caption should not be added. Normal position Image will be left aligned in below sample: ![Desktop View](/assets/img/sample/mockup.png){: .normal } Float to the left ![Desktop View](/assets/img/sample/mockup.png){: .left } Float to the right ![Desktop View](/assets/img/sample/mockup.png){: .right } Dark/Light modeYou can make images follow theme preferences in dark/light mode. This requires you to prepare two images, one for dark mode and one for light mode, and then assign them a specific class (dark or light):![Light mode only](/path/to/light-mode.png){: .light }![Dark mode only](/path/to/dark-mode.png){: .dark }ShadowThe screenshots of the program window can be considered to show the shadow effect:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&lt;img src=\"https://cdn.com/path/to/flower.png\" alt=\"The flower\"&gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&lt;img src=\"/img/path/flower.png\" alt=\"The flower\"&gt;Preview ImageIf you want to add an image at the top of the post, please provide an image with a resolution of 1200 x 630. Please note that if the image aspect ratio does not meet 1.91 : 1, the image will be scaled and cropped.Knowing these prerequisites, you can start setting the image’s attribute:---image: path: /path/to/image alt: image alternative text---Note that the img_path can also be passed to the preview image, that is, when it has been set, the attribute path only needs the image file name.For simple use, you can also just use image to define the path.---image: /path/to/image---LQIPFor preview images:---image: lqip: /path/to/lqip-file # or base64 URI--- You can observe LQIP in the preview image of post Text and Typography.For normal images:![Image description](/path/to/image){: lqip=\"/path/to/lqip-file\" }Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Hightlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value``` The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %} This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.VideosYou can embed a video with the following syntax:{% include embed/{Platform}.html id='{ID}' %}Where Platform is the lowercase of the platform name, and ID is the video ID.The following table shows how to get the two parameters we need in a given video URL, and you can also know the currently supported video platforms. Video URL Platform ID https://www.youtube.com/watch?v=H-B46URT4mg youtube H-B46URT4mg https://www.twitch.tv/videos/1634779211 twitch 1634779211 Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts." }, { "title": "Text and Typography", "url": "/posts/text-and-typography/", "categories": "Blogging, Tutorial", "tags": "typography", "date": "2019-08-08 11:33:00 +0800", "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 ...", "content": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphQuisque egestas convallis ipsum, ut sollicitudin risus tincidunt a. Maecenas interdum malesuada egestas. Duis consectetur porta risus, sit amet vulputate urna facilisis ac. Phasellus semper dui non purus ultrices sodales. Aliquam ante lorem, ornare a feugiat ac, finibus nec mauris. Vivamus ut tristique nisi. Sed vel leo vulputate, efficitur risus non, posuere mi. Nullam tincidunt bibendum rutrum. Proin commodo ornare sapien. Vivamus interdum diam sed sapien blandit, sit amet aliquam risus mattis. Nullam arcu turpis, mollis quis laoreet at, placerat id nibh. Suspendisse venenatis eros eros.ListsOrdered list Firstly Secondly ThirdlyUnordered list Chapter Section Paragraph ToDo list Job Step 1 Step 2 Step 3 Description list Sun the star around which the earth orbits Moon the natural satellite of the earth, visible by reflected light from the sunBlock Quote This line shows the block quote.Prompts An example showing the tip type prompt. An example showing the info type prompt. An example showing the warning type prompt. An example showing the danger type prompt.Tables Company Contact Country Alfreds Futterkiste Maria Anders Germany Island Trading Helen Bennett UK Magazzini Alimentari Riuniti Giovanni Rovelli Italy Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blocksCommonThis is a common code snippet, without syntax highlight and line number.Specific Languageif [ $? -ne 0 ]; then echo \"The command was not successful.\"; #do the needful / exitfi;Specific filename@import \"colors/light-typography\", \"colors/dark-typography\"MathematicsThe mathematics powered by MathJax:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Mermaid SVG gantt title Adding GANTT diagram functionality to mermaid apple :a, 2017-07-20, 1w banana :crit, b, 2017-07-23, 1d cherry :active, c, after b a, 1dImagesDefault (with caption)Full screen width and center alignmentLeft alignedFloat to leftPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Float to rightPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Dark/Light mode &amp; ShadowThe image below will toggle dark/light mode based on theme preference, notice it has shadows.VideoReverse Footnote The footnote source &#8617; The 2nd footnote source &#8617; " } ]
