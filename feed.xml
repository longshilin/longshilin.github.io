<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://longshilin.com/</id><title>Notes</title><subtitle>Blog for Unity3d Game Development.</subtitle> <updated>2025-02-04T00:43:15+08:00</updated> <author> <name>admin</name> <uri>https://longshilin.com/</uri> </author><link rel="self" type="application/atom+xml" href="https://longshilin.com/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://longshilin.com/"/> <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator> <rights> © 2025 admin </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>05 - ETTask</title><link href="https://longshilin.com/posts/05-ETTask/" rel="alternate" type="text/html" title="05 - ETTask" /><published>2025-02-04T00:00:00+08:00</published> <updated>2025-02-04T00:00:00+08:00</updated> <id>https://longshilin.com/posts/05-ETTask/</id> <content type="text/html" src="https://longshilin.com/posts/05-ETTask/" /> <author> <name>admin</name> </author> <category term="ET7" /> <summary>ETTask相比于Task的优点： 生成代码极简，去除了多线程的支持，性能最好 对象池消除了Task GC 去掉了ETVoid</summary> </entry> <entry><title>03 - 单间管理器</title><link href="https://longshilin.com/posts/03-%E5%8D%95%E9%97%B4%E7%AE%A1%E7%90%86%E5%99%A8/" rel="alternate" type="text/html" title="03 - 单间管理器" /><published>2025-02-04T00:00:00+08:00</published> <updated>2025-02-04T00:41:20+08:00</updated> <id>https://longshilin.com/posts/03-%E5%8D%95%E9%97%B4%E7%AE%A1%E7%90%86%E5%99%A8/</id> <content type="text/html" src="https://longshilin.com/posts/03-%E5%8D%95%E9%97%B4%E7%AE%A1%E7%90%86%E5%99%A8/" /> <author> <name>admin</name> </author> <category term="ET7" /> <summary>为什么需要单间管理器： 统一管理单间类，单间类也需要管理生命周期，创建和清理的统一管理 统一管理基础库，灵活引入基础库。写一个Singleton包一下，比如YooAssets第三方插件。 消除静态字段，比如static dictionary这种变量，没有地方清理，unity关闭的时候没有一个地方统一清理，所以比如需要定义静态字段的时候都放到一个统一的singleton中作为单间的成员变量即可。 unity domain模式，可以不清理static字段，加速unity启动的速度 为什么不用组件：最底层做了一个单间管理器，在单间管理器的基础之上，再创建组件。 为什么要用Game.AddSingleton()创建单间： 不需要用TimeInfo.Instance直接这种方式来实例化单间类，因为很难看出第一次创建的地方，代码可读性高，明确知道单间初始化的地...</summary> </entry> <entry><title>02 - All In One</title><link href="https://longshilin.com/posts/02-All-In-One/" rel="alternate" type="text/html" title="02 - All In One" /><published>2025-02-04T00:00:00+08:00</published> <updated>2025-02-04T00:41:18+08:00</updated> <id>https://longshilin.com/posts/02-All-In-One/</id> <content type="text/html" src="https://longshilin.com/posts/02-All-In-One/" /> <author> <name>admin</name> </author> <category term="ET7" /> <summary>各类服务器进程合并：命令行启动参数不同而已，发布部署简单，配置资源方便，多种服务共用进程，结构调整容易，比如两种或多种服务要合并或拆分，比如Realm和Gate如果压力小可以放到一个进程，甚至可以把所有服务放到一个进程；如果压力大拆分也很方便。无限增加app类型。66 后端跟机器人合并，命令行 dotnet App.dll --Process=1 --Console=1 启动，然后CreateRobot —Num=10 前端和后端合并：后端可以包含前端的逻辑，机器人的逻辑可以在后端启动， 代码类重名，比如ItemComponent和BuffComponent：通过NameSpace来区分 事件订阅如何区分前端处理还是后端处理：通过抛出事件的时候带入Scene场景类型来区分 额外的好处：不需要单独启服务端，前后端代码共享更加方便 ...</summary> </entry> <entry><title>01 - 代码结构</title><link href="https://longshilin.com/posts/01-%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84/" rel="alternate" type="text/html" title="01 - 代码结构" /><published>2025-02-04T00:00:00+08:00</published> <updated>2025-02-04T00:41:16+08:00</updated> <id>https://longshilin.com/posts/01-%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84/</id> <content type="text/html" src="https://longshilin.com/posts/01-%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84/" /> <author> <name>admin</name> </author> <category term="ET7" /> <summary>项目需求 热更新： 逻辑代码和MonoBehaivor脚本进行分离，才能做热更新 数据跟方法分离，热重载：数据和方法分离，主要用于服务器不停服热更新，客户端也能用，使用场景就是Model和ModelView数据层不变，重载的是Hotfix和HotfixView两个dll，也就是重载的是逻辑部份。 逻辑和表现分离：玩家移动在逻辑层是离散的点，然后表现需要做差值顺滑移动过去；逻辑是同步的，表现是异步的；战斗需要做预表现，客户端释放技能的时候表现层可以提前播放前摇动作，等服务器的技能消息过来；MMO做切换场景的时候，数据是收到一个消息处理一个消息，服务器的切场景是一瞬间的事情，但是客户端需要异步加载，然后客户端在切换场景的时候，服务器可能发过来角色的数据，以及角色附近的玩家信息的等等， 四个程序集是非常优美的设计</summary> </entry> <entry><title>2025-02-03 日志</title><link href="https://longshilin.com/posts/2025-02-03-%E6%97%A5%E5%BF%97/" rel="alternate" type="text/html" title="2025-02-03 日志" /><published>2025-02-03T00:00:00+08:00</published> <updated>2025-02-04T00:24:28+08:00</updated> <id>https://longshilin.com/posts/2025-02-03-%E6%97%A5%E5%BF%97/</id> <content type="text/html" src="https://longshilin.com/posts/2025-02-03-%E6%97%A5%E5%BF%97/" /> <author> <name>admin</name> </author> <category term="日志" /> <summary>今天是2025年大年初六，返沪了。从今天起好好记录博客～～ 下午在高铁上下载了DeepSeek，体验了一下确实很好用，对于国产GPT能做到这样，实属牛逼～</summary> </entry> </feed>
