<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://longshilin.com/</id><title>Notes</title><subtitle>Blog for Unity3d Game Development.</subtitle> <updated>2025-01-27T15:28:28+08:00</updated> <author> <name>longshilin</name> <uri>https://longshilin.com/</uri> </author><link rel="self" type="application/atom+xml" href="https://longshilin.com/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://longshilin.com/"/> <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator> <rights> © 2025 longshilin </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>2024-10-06 日志</title><link href="https://longshilin.com/posts/%E6%97%A5%E5%BF%97/" rel="alternate" type="text/html" title="2024-10-06 日志" /><published>2024-10-06T10:00:00+08:00</published> <updated>2024-10-06T10:00:00+08:00</updated> <id>https://longshilin.com/posts/%E6%97%A5%E5%BF%97/</id> <content type="text/html" src="https://longshilin.com/posts/%E6%97%A5%E5%BF%97/" /> <author> <name>longshilin</name> </author> <category term="日志" /> <summary>这是我在博客上发布的第一篇日志，想要通过日志的方式记录我的工作和学习过程，最近很欣赏一个成语厚积薄发 厚积薄发意思是经过长时间的积累和准备，在时机成熟时迅速展现出强大的能力或取得显著的成就。这个成语强调了持续积累的重要性，以及在积累足够的基础上，爆发出潜力或能量。 这四个字的字面意思是“厚重地积累，薄弱地发出”，但实际上指的是在积累经验、知识或资源之后，能够在关键时刻展现出强大的影响力或成功。通常用于鼓励人们在学习、工作或生活中注重积累，不要急于求成，因为厚积才能薄发。 通过记录的方式能够鞭策自己在积累的道路上越走越远，文字记录也是一个归纳的过程，看着自己的沉淀的内容也会更有动力前行。</summary> </entry> <entry><title>总结Action Func delegate event四个关键词</title><link href="https://longshilin.com/posts/%E6%80%BB%E7%BB%93Action-Func-delegate-event%E5%9B%9B%E4%B8%AA%E5%85%B3%E9%94%AE%E5%AD%97/" rel="alternate" type="text/html" title="总结Action Func delegate event四个关键词" /><published>2024-05-28T15:34:00+08:00</published> <updated>2025-01-27T15:01:23+08:00</updated> <id>https://longshilin.com/posts/%E6%80%BB%E7%BB%93Action-Func-delegate-event%E5%9B%9B%E4%B8%AA%E5%85%B3%E9%94%AE%E5%AD%97/</id> <content type="text/html" src="https://longshilin.com/posts/%E6%80%BB%E7%BB%93Action-Func-delegate-event%E5%9B%9B%E4%B8%AA%E5%85%B3%E9%94%AE%E5%AD%97/" /> <author> <name>longshilin</name> </author> <category term="游戏开发" /> <category term="实用工具" /> <summary>通过AI来总结这几个关键词的区别和联系 delegate、Action、Func的定义 delegate 和 Action 都是用于定义委托类型的机制，但它们有一些关键的区别和特定的用途： 1. delegate 定义 : delegate 是一种类型定义，可以用来表示对任何返回值和参数类型的函数的引用。 语法 : 需要显式定义。 public delegate int MyDelegate(int x, int y); 灵活性 : 它允许你定义具有特定返回类型和参数的委托，可以是具有返回值的方法或者是 void 方法。 使用场景 : 当你需要定义自定义签名或者使用返回类型（除了 void）时，可以考虑使用 delegate。 2. Action 定义 : Act...</summary> </entry> <entry><title>位标志</title><link href="https://longshilin.com/posts/%E4%BD%8D%E6%A0%87%E5%BF%97/" rel="alternate" type="text/html" title="位标志" /><published>2024-05-28T15:34:00+08:00</published> <updated>2024-06-19T09:45:28+08:00</updated> <id>https://longshilin.com/posts/%E4%BD%8D%E6%A0%87%E5%BF%97/</id> <content type="text/html" src="https://longshilin.com/posts/%E4%BD%8D%E6%A0%87%E5%BF%97/" /> <author> <name>longshilin</name> </author> <category term="游戏开发" /> <category term="实用工具" /> <summary>在C#中，使用带有[Flags]特性的枚举来表示一组位标志是非常常见的需求。以下是如何独立使用每个标志、判断某个标志是否被设置以及设置某个标志的示例。 定义枚举 首先，定义一个带有[Flags]特性的枚举： [Flags] public enum GuidanceStatus : int { None = 0, Lottery = 1, EnterAdventure = 1 &amp;amp;lt;&amp;amp;lt; 1, SkillLevelUp = 1 &amp;amp;lt;&amp;amp;lt; 2, AutoDecompose = 1 &amp;amp;lt;&amp;amp;lt; 3, Equipment = 1 &amp;amp;lt;&amp;amp;lt; 4, PetEquipment = 1 &amp;amp;lt;&amp;amp;lt; 5, PetLevelUp = 1 &amp;amp;lt;&amp;amp;lt; 6, AutoAttack = 1 &amp;amp;...</summary> </entry> <entry><title>2023 OpenAI 开发者日主题演讲</title><link href="https://longshilin.com/posts/OpenAI-%E5%BC%80%E5%8F%91%E8%80%85%E6%97%A5%E4%B8%BB%E9%A2%98%E6%BC%94%E8%AE%B2/" rel="alternate" type="text/html" title="2023 OpenAI 开发者日主题演讲" /><published>2023-11-16T00:00:00+08:00</published> <updated>2023-11-16T10:49:44+08:00</updated> <id>https://longshilin.com/posts/OpenAI-%E5%BC%80%E5%8F%91%E8%80%85%E6%97%A5%E4%B8%BB%E9%A2%98%E6%BC%94%E8%AE%B2/</id> <content type="text/html" src="https://longshilin.com/posts/OpenAI-%E5%BC%80%E5%8F%91%E8%80%85%E6%97%A5%E4%B8%BB%E9%A2%98%E6%BC%94%E8%AE%B2/" /> <author> <name>longshilin</name> </author> <category term="GPT" /> <summary></summary> </entry> <entry><title>构建打包ET8的两种模式：Demo（状态同步）以及Lockstep（帧同步）</title><link href="https://longshilin.com/posts/%E6%9E%84%E5%BB%BA%E6%89%93%E5%8C%85ET8%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F-Demo-%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5-%E4%BB%A5%E5%8F%8ALockstep-%E5%B8%A7%E5%90%8C%E6%AD%A5/" rel="alternate" type="text/html" title="构建打包ET8的两种模式：Demo（状态同步）以及Lockstep（帧同步）" /><published>2023-11-15T00:00:00+08:00</published> <updated>2023-11-15T00:00:00+08:00</updated> <id>https://longshilin.com/posts/%E6%9E%84%E5%BB%BA%E6%89%93%E5%8C%85ET8%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F-Demo-%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5-%E4%BB%A5%E5%8F%8ALockstep-%E5%B8%A7%E5%90%8C%E6%AD%A5/</id> <content type="text/html" src="https://longshilin.com/posts/%E6%9E%84%E5%BB%BA%E6%89%93%E5%8C%85ET8%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F-Demo-%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5-%E4%BB%A5%E5%8F%8ALockstep-%E5%B8%A7%E5%90%8C%E6%AD%A5/" /> <author> <name>longshilin</name> </author> <category term="ET8" /> <summary></summary> </entry> </feed>
